"""Functions for forecasting values based on the estimated model."""

import pandas as pd
from sklearn.metrics import (
    mean_absolute_error,
    mean_absolute_percentage_error,
    mean_squared_error,
)


def forecast(data, model):
    """Generate forecasts using the provided model.

    Args:
        data: The time series data to forecast on.
        model: The time series model to use for generating forecasts, either "hw" or "arima".

    Returns:
        A pandas DataFrame containing the forecasted values with date index.

    """
    train_size = int(len(data) * 0.7)
    test_data = data[train_size : len(data)]

    forecasts = model.forecast(len(test_data))
    forecasts = forecasts.to_frame(name="PRED")
    forecasts.index.name = "DATE"
    return forecasts


def metrics(data, hw_forecasts, arima_forecasts):
    """Calculate evaluation metrics for the Holt-Winters and ARIMA models.

    Args:
        data: The original time series data.
        hw_forecasts: The forecasted values generated by the Holt-Winters model.
        arima_forecasts: The forecasted values generated by the ARIMA model.

    Returns:
        A pandas DataFrame containing the evaluation metrics for both models.

    """
    train_size = int(len(data) * 0.7)
    test_data = data[train_size : len(data)]

    mae_holt = mean_absolute_error(test_data["UNRATE"], hw_forecasts)
    mse_holt = mean_squared_error(test_data["UNRATE"], hw_forecasts)
    rmse_holt = mean_squared_error(test_data["UNRATE"], hw_forecasts, squared=False)
    mape_holt = mean_absolute_percentage_error(test_data["UNRATE"], hw_forecasts)

    mae_arima = mean_absolute_error(test_data["UNRATE"], arima_forecasts)
    mse_arima = mean_squared_error(test_data["UNRATE"], arima_forecasts)
    rmse_arima = mean_squared_error(test_data["UNRATE"], arima_forecasts, squared=False)
    mape_arima = mean_absolute_percentage_error(test_data["UNRATE"], arima_forecasts)

    df = {
        "Model": ["Holt-Winters", "ARIMA"],
        "MAE": [mae_holt, mae_arima],
        "MSE": [mse_holt, mse_arima],
        "RMSE": [rmse_holt, rmse_arima],
        "MAPE": [mape_holt, mape_arima],
    }

    df = pd.DataFrame(df)

    return df
